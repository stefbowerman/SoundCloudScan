var SC_CLIENT_ID, audioElement;

audioElement = document.createElement('audio');

window.audioIsSupported = !!(audioElement.canPlayType && audioElement.canPlayType('audio/mpeg;').replace(/no/, ''));

SC_CLIENT_ID = 'a6edb50e62be5fdd8fad80afd621cdd9';

$(function() {
  var $audio, getApiOptionsHash, loadAndPlayRandomTrack, powerOffRadio, powerOnRadio, toggleRadioOnOff;
  window.scRadioUI = new RadioUI('.radio', "#track-information", '#radio-status');
  window.scTrackLibrary = new RadioTrackLibrary();
  window.scCurrentTrack = new RadioCurrentTrack();
  window.scRadioClock = new RadioClock('#radio-clock');
  window.scRadioGenre = new RadioGenre('#radio-genre');
  window.radioVolumeControl = new RadioVolumeControl('#radio-volume', 0.5);
  scTrackLibrary.loadTracks({}, loadAndPlayRandomTrack);
  if (audioIsSupported) {
    audioElement.volume = window.radioVolumeControl.currentVolume;
  }
  $audio = $(audioElement);
  loadAndPlayRandomTrack = function() {
    var track, url;
    window.scRadioUI.startScan();
    track = scTrackLibrary.getRandomUnplayedTrack();
    $audio.get(0).pause();
    url = "" + track.stream_url + "?allow_redirects=False&client_id=" + SC_CLIENT_ID;
    return $audio.attr('src', url).bind('canplay', function() {
      window.scCurrentTrack.setTrack(track);
      window.scRadioUI.finishScan();
      return audioElement.play();
    }).bind('ended error', loadAndPlayRandomTrack);
  };
  powerOffRadio = function() {
    audioElement.pause();
    window.scRadioUI.powerOffUI();
    $("#track-information").hide();
    window.scRadioClock.stopTicking();
    $('#radio-clock').html('');
    $('.radio-screen-top-bar').hide();
    $('#radio-status').html('Goodbye').show();
    return setTimeout(function() {
      $('#radio-status').hide();
      return window.scRadioUI.isOn = false;
    }, 1500);
  };
  powerOnRadio = function() {
    window.scRadioUI.powerOnUI();
    $('.radio-screen-top-bar').show();
    window.scRadioClock.startTicking();
    $('#radio-status').html('Welcome').show();
    return setTimeout(function() {
      loadAndPlayRandomTrack();
      return window.scRadioUI.isOn = true;
    }, 1000);
  };
  toggleRadioOnOff = function() {
    if (window.scRadioUI.isOn) {
      return powerOffRadio();
    } else {
      return powerOnRadio();
    }
  };
  getApiOptionsHash = function() {
    var hash;
    hash = {
      filter: 'streamable',
      genres: window.scRadioGenre.getApiGenre()
    };
    return hash;
  };
  $("#radio-power").on('click', toggleRadioOnOff);
  $('#new-song').on('click', loadAndPlayRandomTrack);
  $('#volume-up').on('click', function() {
    window.radioVolumeControl.increaseVolume();
    return audioElement.volume = window.radioVolumeControl.currentVolume;
  });
  $('#volume-down').on('click', function() {
    window.radioVolumeControl.decreaseVolume();
    return audioElement.volume = window.radioVolumeControl.currentVolume;
  });
  $('[data-genre]').on('click', function() {
    var newGenre;
    newGenre = $(this).data('genre');
    if (window.scRadioGenre.genre === newGenre) {
      window.scRadioGenre.showGenre();
      return false;
    }
    window.scRadioGenre.setGenre(newGenre);
    return scTrackLibrary.loadTracks(getApiOptionsHash(), function() {
      return loadAndPlayRandomTrack();
    });
  });
  $('.rockable-target').on('mousedown', function(e) {
    var $rockableButton;
    $rockableButton = $(this).parents('.control-button.rockable');
    if ($(this).hasClass('target-top')) {
      $rockableButton.addClass('rocked-up');
    }
    if ($(this).hasClass('target-bottom')) {
      return $rockableButton.addClass('rocked-down');
    }
  }).on('mouseup', function() {
    return $(this).parents('.control-button.rockable').removeClass('rocked-up rocked-down');
  });
  if (window.audioIsSupported) {
    return setTimeout(function() {
      return powerOnRadio();
    }, 1000);
  } else {
    return $('#radio-status').html("Audio is not supported by your browser").show();
  }
});

// ----------------------------------------------------------------------------
// Buzz, a Javascript HTML5 Audio library
// Licensed under the MIT license.
// http://buzz.jaysalvat.com/
// ----------------------------------------------------------------------------
// Copyright (C) 2013 Jay Salvat
// http://jaysalvat.com/
// ----------------------------------------------------------------------------

(function (name, context, factory) {
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = factory();
    } else if (typeof context.define === 'function' && context.define.amd) {
        define(name, [], factory);
    } else {
        context[name] = factory();
    }
})('buzz', this, function () {

    var buzz = {
        defaults: {
            autoplay: false,
            duration: 5000,
            formats: [],
            loop: false,
            placeholder: '--',
            preload: 'metadata',
            volume: 80,
            document: document // iframe support
        },
        types: {
            'mp3': 'audio/mpeg',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'aac': 'audio/aac',
            'm4a': 'audio/x-m4a'
        },
        sounds: [],
        el: document.createElement('audio'),

        sound: function (src, options) {
            options = options || {};

            var doc = options.document || buzz.defaults.document;

            var pid = 0,
                events = [],
                eventsOnce = {},
                supported = buzz.isSupported();

            // publics
            this.load = function () {
                if (!supported) {
                    return this;
                }

                this.sound.load();

                return this;
            };

            this.play = function () {
                if (!supported) {
                    return this;
                }

                this.sound.play();

                return this;
            };

            this.togglePlay = function () {
                if (!supported) {
                    return this;
                }

                if (this.sound.paused) {
                    this.sound.play();
                } else {
                    this.sound.pause();
                }

                return this;
            };

            this.pause = function () {
                if (!supported) {
                    return this;
                }

                this.sound.pause();

                return this;
            };

            this.isPaused = function () {
                if (!supported) {
                    return null;
                }

                return this.sound.paused;
            };

            this.stop = function () {
                if (!supported ) {
                    return this;
                }

                this.setTime(0);
                this.sound.pause();

                return this;
            };

            this.isEnded = function () {
                if (!supported) {
                    return null;
                }

                return this.sound.ended;
            };

            this.loop = function () {
                if (!supported) {
                    return this;
                }

                this.sound.loop = 'loop';
                this.bind('ended.buzzloop', function () {
                    this.currentTime = 0;
                    this.play();
                });

                return this;
            };

            this.unloop = function () {
                if (!supported) {
                    return this;
                }

                this.sound.removeAttribute('loop');
                this.unbind('ended.buzzloop');

                return this;
            };

            this.mute = function () {
                if (!supported) {
                    return this;
                }

                this.sound.muted = true;

                return this;
            };

            this.unmute = function () {
                if (!supported) {
                    return this;
                }

                this.sound.muted = false;

                return this;
            };

            this.toggleMute = function () {
                if (!supported) {
                    return this;
                }

                this.sound.muted = !this.sound.muted;

                return this;
            };

            this.isMuted = function () {
                if (!supported) {
                    return null;
                }

                return this.sound.muted;
            };

            this.setVolume = function (volume) {
                if (!supported) {
                    return this;
                }

                if (volume < 0) {
                    volume = 0;
                }
                if (volume > 100) {
                    volume = 100;
                }

                this.volume = volume;
                this.sound.volume = volume / 100;

                return this;
            };

            this.getVolume = function () {
                if (!supported) {
                    return this;
                }

                return this.volume;
            };

            this.increaseVolume = function (value) {
                return this.setVolume(this.volume + (value || 1));
            };

            this.decreaseVolume = function (value) {
                return this.setVolume(this.volume - (value || 1));
            };

            this.setTime = function (time) {
                if (!supported) {
                    return this;
                }

                var set = true;
                this.whenReady(function () {
                    if (set === true) {
                        set = false;
                        this.sound.currentTime = time;
                   }
                });

                return this;
            };

            this.getTime = function () {
                if (!supported) {
                    return null;
                }

                var time = Math.round(this.sound.currentTime * 100) / 100;

                return isNaN(time) ? buzz.defaults.placeholder : time;
            };

            this.setPercent = function (percent) {
                if (!supported) {
                    return this;
                }

                return this.setTime(buzz.fromPercent(percent, this.sound.duration));
            };

            this.getPercent = function () {
                if (!supported) {
                    return null;
                }

                var percent = Math.round(buzz.toPercent(this.sound.currentTime, this.sound.duration));

                return isNaN(percent) ? buzz.defaults.placeholder : percent;
            };

            this.setSpeed = function (duration) {
                if (!supported) {
                    return this;
                }

                this.sound.playbackRate = duration;

                return this;
            };

            this.getSpeed = function () {
                if (!supported) {
                    return null;
                }

                return this.sound.playbackRate;
            };

            this.getDuration = function () {
                if (!supported) {
                    return null;
                }

                var duration = Math.round(this.sound.duration * 100) / 100;

                return isNaN(duration) ? buzz.defaults.placeholder : duration;
            };

            this.getPlayed = function () {
                if (!supported) {
                    return null;
                }

                return timerangeToArray(this.sound.played);
            };

            this.getBuffered = function () {
                if (!supported) {
                    return null;
                }

                return timerangeToArray(this.sound.buffered);
            };

            this.getSeekable = function () {
                if (!supported) {
                    return null;
                }

                return timerangeToArray(this.sound.seekable);
            };

            this.getErrorCode = function () {
                if (supported && this.sound.error) {
                    return this.sound.error.code;
                }

                return 0;
            };

            this.getErrorMessage = function () {
                if (!supported) {
                    return null;
                }

                switch(this.getErrorCode()) {
                    case 1:
                        return 'MEDIA_ERR_ABORTED';
                    case 2:
                        return 'MEDIA_ERR_NETWORK';
                    case 3:
                        return 'MEDIA_ERR_DECODE';
                    case 4:
                        return 'MEDIA_ERR_SRC_NOT_SUPPORTED';
                    default:
                        return null;
                }
            };

            this.getStateCode = function () {
                if (!supported) {
                    return null;
                }

                return this.sound.readyState;
            };

            this.getStateMessage = function () {
                if (!supported) {
                    return null;
                }

                switch(this.getStateCode()) {
                    case 0:
                        return 'HAVE_NOTHING';
                    case 1:
                        return 'HAVE_METADATA';
                    case 2:
                        return 'HAVE_CURRENT_DATA';
                    case 3:
                        return 'HAVE_FUTURE_DATA';
                    case 4:
                        return 'HAVE_ENOUGH_DATA';
                    default:
                        return null;
                }
            };

            this.getNetworkStateCode = function () {
                if (!supported) {
                    return null;
                }

                return this.sound.networkState;
            };

            this.getNetworkStateMessage = function () {
                if (!supported) {
                    return null;
                }

                switch(this.getNetworkStateCode()) {
                    case 0:
                        return 'NETWORK_EMPTY';
                    case 1:
                        return 'NETWORK_IDLE';
                    case 2:
                        return 'NETWORK_LOADING';
                    case 3:
                        return 'NETWORK_NO_SOURCE';
                    default:
                        return null;
                }
            };

            this.set = function (key, value) {
                if (!supported) {
                    return this;
                }

                this.sound[key] = value;

                return this;
            };

            this.get = function (key) {
                if (!supported) {
                  return null;
                }

                return key ? this.sound[key] : this.sound;
            };

            this.bind = function (types, func) {
                if (!supported) {
                    return this;
                }

                types = types.split(' ');

                var self = this,
                    efunc = function (e) { func.call(self, e); };

                for (var t = 0; t < types.length; t++) {
                    var type = types[t],
                        idx = type;
                        type = idx.split('.')[0];

                        events.push({ idx: idx, func: efunc });
                        this.sound.addEventListener(type, efunc, true);
                }

                return this;
            };

            this.unbind = function (types) {
                if (!supported) {
                    return this;
                }

                types = types.split(' ');

                for (var t = 0; t < types.length; t++) {
                    var idx = types[t],
                        type = idx.split('.')[0];

                    for (var i = 0; i < events.length; i++) {
                        var namespace = events[i].idx.split('.');
                        if (events[i].idx == idx || (namespace[1] && namespace[1] == idx.replace('.', ''))) {
                            this.sound.removeEventListener(type, events[i].func, true);
                            // remove event
                            events.splice(i, 1);
                        }
                    }
                }

                return this;
            };

            this.bindOnce = function (type, func) {
                if (!supported) {
                    return this;
                }

                var self = this;

                eventsOnce[pid++] = false;
                this.bind(type + '.' + pid, function () {
                   if (!eventsOnce[pid]) {
                       eventsOnce[pid] = true;
                       func.call(self);
                   }
                   self.unbind(type + '.' + pid);
                });

                return this;
            };

            this.trigger = function (types) {
                if (!supported) {
                    return this;
                }

                types = types.split(' ');

                for (var t = 0; t < types.length; t++) {
                    var idx = types[t];

                    for (var i = 0; i < events.length; i++) {
                        var eventType = events[i].idx.split('.');

                        if (events[i].idx == idx || (eventType[0] && eventType[0] == idx.replace('.', ''))) {
                            var evt = doc.createEvent('HTMLEvents');

                            evt.initEvent(eventType[0], false, true);

                            this.sound.dispatchEvent(evt);
                        }
                    }
                }

                return this;
            };

            this.fadeTo = function (to, duration, callback) {
                if (!supported) {
                    return this;
                }

                if (duration instanceof Function) {
                    callback = duration;
                    duration = buzz.defaults.duration;
                } else {
                    duration = duration || buzz.defaults.duration;
                }

                var from = this.volume,
                    delay = duration / Math.abs(from - to),
                    self = this;

                this.play();

                function doFade() {
                    setTimeout(function () {
                        if (from < to && self.volume < to) {
                            self.setVolume(self.volume += 1);
                            doFade();
                        } else if (from > to && self.volume > to) {
                            self.setVolume(self.volume -= 1);
                            doFade();
                        } else if (callback instanceof Function) {
                            callback.apply(self);
                        }
                    }, delay);
                }

                this.whenReady(function () {
                    doFade();
                });

                return this;
            };

            this.fadeIn = function (duration, callback) {
                if (!supported) {
                    return this;
                }

                return this.setVolume(0).fadeTo(100, duration, callback);
            };

            this.fadeOut = function (duration, callback) {
                if (!supported) {
                    return this;
                }

                return this.fadeTo(0, duration, callback);
            };

            this.fadeWith = function (sound, duration) {
                if (!supported) {
                    return this;
                }

                this.fadeOut(duration, function () {
                    this.stop();
                });

                sound.play().fadeIn(duration);

                return this;
            };

            this.whenReady = function (func) {
                if (!supported) {
                    return null;
                }

                var self = this;

                if (this.sound.readyState === 0) {
                    this.bind('canplay.buzzwhenready', function () {
                        func.call(self);
                    });
                } else {
                    func.call(self);
                }
            };

            // privates
            function timerangeToArray(timeRange) {
                var array = [],
                    length = timeRange.length - 1;

                for (var i = 0; i <= length; i++) {
                    array.push({
                        start: timeRange.start(i),
                        end: timeRange.end(i)
                    });
                }

                return array;
            }

            function getExt(filename) {
                return filename.split('.').pop();
            }

            function addSource(sound, src) {
                var source = doc.createElement('source');

                source.src = src;

                if (buzz.types[getExt(src)]) {
                    source.type = buzz.types[getExt(src)];
                }

                sound.appendChild(source);
            }

            // init
            if (supported && src) {

                for (var i in buzz.defaults) {
                    if (buzz.defaults.hasOwnProperty(i)) {
                        if (options[i] === undefined)
                            options[i] = buzz.defaults[i];
                    }
                }

                this.sound = doc.createElement('audio');

                if (src instanceof Array) {
                    for (var j in src) {
                        if (src.hasOwnProperty(j)) {
                            addSource(this.sound, src[j]);
                        }
                    }
                } else if (options.formats.length) {
                    for (var k in options.formats) {
                        if (options.formats.hasOwnProperty(k)) {
                            addSource(this.sound, src + '.' + options.formats[k]);
                        }
                    }
                } else {
                    addSource(this.sound, src);
                }

                if (options.loop) {
                    this.loop();
                }

                if (options.autoplay) {
                    this.sound.autoplay = 'autoplay';
                }

                if (options.preload === true) {
                    this.sound.preload = 'auto';
                } else if (options.preload === false) {
                    this.sound.preload = 'none';
                } else {
                    this.sound.preload = options.preload;
                }

                this.setVolume(options.volume);

                buzz.sounds.push(this);
            }
        },

        group: function (sounds) {
            sounds = argsToArray(sounds, arguments);

            // publics
            this.getSounds = function () {
                return sounds;
            };

            this.add = function (soundArray) {
                soundArray = argsToArray(soundArray, arguments);

                for (var a = 0; a < soundArray.length; a++) {
                    sounds.push(soundArray[a]);
                }
            };

            this.remove = function (soundArray) {
                soundArray = argsToArray(soundArray, arguments);

                for (var a = 0; a < soundArray.length; a++) {
                    for (var i = 0; i < sounds.length; i++) {
                        if (sounds[i] == soundArray[a]) {
                            sounds.splice(i, 1);
                            break;
                        }
                    }
                }
            };

            this.load = function () {
                fn('load');

                return this;
            };

            this.play = function () {
                fn('play');

                return this;
            };

            this.togglePlay = function () {
                fn('togglePlay');

                return this;
            };

            this.pause = function (time) {
                fn('pause', time);

                return this;
            };

            this.stop = function () {
                fn('stop');

                return this;
            };

            this.mute = function () {
                fn('mute');

                return this;
            };

            this.unmute = function () {
                fn('unmute');

                return this;
            };

            this.toggleMute = function () {
                fn('toggleMute');

                return this;
            };

            this.setVolume = function (volume) {
                fn('setVolume', volume);

                return this;
            };

            this.increaseVolume = function (value) {
                fn('increaseVolume', value);

                return this;
            };

            this.decreaseVolume = function (value) {
                fn('decreaseVolume', value);

                return this;
            };

            this.loop = function () {
                fn('loop');

                return this;
            };

            this.unloop = function () {
                fn('unloop');

                return this;
            };

            this.setTime = function (time) {
                fn('setTime', time);

                return this;
            };

            this.set = function (key, value) {
                fn('set', key, value);

                return this;
            };

            this.bind = function (type, func) {
                fn('bind', type, func);

                return this;
            };

            this.unbind = function (type) {
                fn('unbind', type);

                return this;
            };

            this.bindOnce = function (type, func) {
                fn('bindOnce', type, func);

                return this;
            };

            this.trigger = function (type) {
                fn('trigger', type);

                return this;
            };

            this.fade = function (from, to, duration, callback) {
                fn('fade', from, to, duration, callback);

                return this;
            };

            this.fadeIn = function (duration, callback) {
                fn('fadeIn', duration, callback);

                return this;
            };

            this.fadeOut = function (duration, callback) {
                fn('fadeOut', duration, callback);

                return this;
            };

            // privates
            function fn() {
                var args = argsToArray(null, arguments),
                    func = args.shift();

                for (var i = 0; i < sounds.length; i++) {
                    sounds[i][func].apply(sounds[i], args);
                }
            }

            function argsToArray(array, args) {
                return (array instanceof Array) ? array : Array.prototype.slice.call(args);
            }
        },

        all: function () {
            return new buzz.group(buzz.sounds);
        },

        isSupported: function () {
            return !!buzz.el.canPlayType;
        },

        isOGGSupported: function () {
            return !!buzz.el.canPlayType && buzz.el.canPlayType('audio/ogg; codecs="vorbis"');
        },

        isWAVSupported: function () {
            return !!buzz.el.canPlayType && buzz.el.canPlayType('audio/wav; codecs="1"');
        },

        isMP3Supported: function () {
            return !!buzz.el.canPlayType && buzz.el.canPlayType('audio/mpeg;');
        },

        isAACSupported: function () {
            return !!buzz.el.canPlayType && (buzz.el.canPlayType('audio/x-m4a;') || buzz.el.canPlayType('audio/aac;'));
        },

        toTimer: function (time, withHours) {
            var h, m, s;

            h = Math.floor(time / 3600);
            h = isNaN(h) ? '--' : (h >= 10) ? h : '0' + h;
            m = withHours ? Math.floor(time / 60 % 60) : Math.floor(time / 60);
            m = isNaN(m) ? '--' : (m >= 10) ? m : '0' + m;
            s = Math.floor(time % 60);
            s = isNaN(s) ? '--' : (s >= 10) ? s : '0' + s;

            return withHours ? h + ':' + m + ':' + s : m + ':' + s;
        },

        fromTimer: function (time) {
            var splits = time.toString().split(':');

            if (splits && splits.length == 3) {
                time = (parseInt(splits[0], 10) * 3600) + (parseInt(splits[1], 10) * 60) + parseInt(splits[2], 10);
            }

            if (splits && splits.length == 2) {
                time = (parseInt(splits[0], 10) * 60) + parseInt(splits[1], 10);
            }

            return time;
        },

        toPercent: function (value, total, decimal) {
            var r = Math.pow(10, decimal || 0);

            return Math.round(((value * 100) / total) * r) / r;
        },

        fromPercent: function (percent, total, decimal) {
            var r = Math.pow(10, decimal || 0);

            return  Math.round(((total / 100) * percent) * r) / r;
        }
    };

    return buzz;
});
var RadioUI;

RadioUI = (function() {
  function RadioUI(elRadio, elTrackInfo, elStatus) {
    this.isOn = false;
    this.$radio = $(elRadio);
    this.$trackInfo = $(elTrackInfo);
    this.$status = $(elStatus);
  }

  RadioUI.prototype.powerOnUI = function() {
    return this.$radio.removeClass('powered-off');
  };

  RadioUI.prototype.powerOffUI = function() {
    return this.$radio.addClass('powered-off');
  };

  RadioUI.prototype.startScan = function() {
    this.$trackInfo.hide();
    return this.$status.html('Scanning').show();
  };

  RadioUI.prototype.finishScan = function() {
    this.$trackInfo.show();
    return this.$status.html('').hide();
  };

  return RadioUI;

})();

var RadioClock;

RadioClock = (function() {
  function RadioClock(targetEl) {
    this.$targetEl = $(targetEl);
    this.tickingInterval = null;
  }

  RadioClock.prototype.startTicking = function() {
    this.tick();
    return this.tickingInterval = setInterval((function(_this) {
      return function() {
        return _this.tick();
      };
    })(this), 1000);
  };

  RadioClock.prototype.stopTicking = function() {
    return clearInterval(this.tickingInterval);
  };

  RadioClock.prototype.tick = function() {
    var d, hours, mins, timeSuffix;
    d = new Date();
    hours = d.getHours();
    mins = d.getMinutes();
    if (mins < 10) {
      mins = "0" + mins;
    }
    timeSuffix = 'AM';
    if (hours > 12) {
      hours = hours - 12;
      timeSuffix = 'PM';
    }
    return this.$targetEl.html("" + hours + ":" + mins + " " + timeSuffix);
  };

  return RadioClock;

})();

var RadioCurrentTrack;

RadioCurrentTrack = (function() {
  function RadioCurrentTrack() {
    this.track = null;
    this.titleOverflowInterval = null;
    this.overflowIntervalDuration = 3500;
  }

  RadioCurrentTrack.prototype.setTrack = function(track) {
    var $overflow, fullWidth, overflowWidth, shiftOverflowText, shifted, visibleWidth;
    this.track = track;
    clearInterval(this.titleOverflowInterval);
    $('#track-title').html(track.title);
    fullWidth = $('#track-title')[0].scrollWidth;
    visibleWidth = $('#track-title').width();
    if (fullWidth > visibleWidth) {
      overflowWidth = fullWidth - visibleWidth;
      $overflow = $('#track-title').wrapInner("<div></div>").children().addClass('text-overflowing');
      shifted = false;
      shiftOverflowText = function() {
        if (shifted) {
          $overflow.css({
            'margin-left': 0
          });
          return shifted = false;
        } else {
          $overflow.css({
            'margin-left': "-" + overflowWidth + "px"
          });
          return shifted = true;
        }
      };
      this.titleOverflowInterval = setInterval(shiftOverflowText, this.overflowIntervalDuration);
    }
    $('#track-artist').html("BY: " + track.user.username);
    return $('#track-url').html("<a href=\"" + track.permalink_url + "\" target=\"_blank\">Listen on SoundCloud <span class=\"track-url-arrow\">&#10095;</span></a>");
  };

  return RadioCurrentTrack;

})();

var RadioGenre;

RadioGenre = (function() {
  function RadioGenre(targetEl, genre) {
    this.genre = genre != null ? genre : null;
    this.$targetEl = $(targetEl);
    this.displayTimeout = null;
    this.displayTimeoutDuration = 2500;
  }

  RadioGenre.prototype.setGenre = function(genre) {
    this.genre = genre;
    this.$targetEl.html("Listening to " + genre);
    this.showGenre();
    return this.genre;
  };

  RadioGenre.prototype.getGenre = function() {
    return this.genre;
  };

  RadioGenre.prototype.getApiGenre = function() {
    if (this.genre === 'all') {
      return null;
    } else {
      return this.genre;
    }
  };

  RadioGenre.prototype.showGenre = function() {
    clearTimeout(this.displayTimeout);
    this.$targetEl.show();
    return this.displayTimeout = setTimeout((function(_this) {
      return function() {
        return _this.$targetEl.hide();
      };
    })(this), this.displayTimeoutDuration);
  };

  RadioGenre.prototype.hideGenre = function() {
    return this.$targetEl.hide();
  };

  return RadioGenre;

})();

(function(window, SC) {
  return window.RadioTrackLibrary = (function() {
    function RadioTrackLibrary(_scClientId) {
      this._scClientId = _scClientId;
      this._playedTrackIds = [];
      this.loadedTracks = [];
      this.unplayedTracks = [];
      this.playedTracks = [];
      this.currentApiOpts = {};
      SC.initialize({
        client_id: 'a6edb50e62be5fdd8fad80afd621cdd9'
      });
    }

    RadioTrackLibrary.prototype.loadTracks = function(apiOptions, callback) {
      if (apiOptions == null) {
        apiOptions = {};
      }
      if (callback == null) {
        callback = false;
      }
      this.currentApiOpts = $.extend({}, {
        filter: 'streamable'
      }, apiOptions);
      return SC.get('/tracks', this.currentApiOpts, (function(_this) {
        return function(tracks) {
          _this.unplayedTracks = tracks;
          if (callback) {
            callback();
          }
          return console.log('done loading tracks!');
        };
      })(this));
    };

    RadioTrackLibrary.prototype.getRandomUnplayedTrack = function() {
      var randomIndex, track;
      randomIndex = Math.floor((Math.random() * this.unplayedTracks.length) + 1);
      track = this.unplayedTracks[randomIndex];
      this.unplayedTracks.splice(randomIndex, 1);
      this.playedTracks.push(track);
      if (this.unplayedTracks.length < 3) {
        this.loadTracks();
      }
      return track;
    };

    return RadioTrackLibrary;

  })();
})(window, SC);

var RadioVolumeControl,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

RadioVolumeControl = (function() {
  function RadioVolumeControl(targetEl, initialVolume) {
    if (initialVolume == null) {
      initialVolume = 0.5;
    }
    this.updateVolumeBarWidth = __bind(this.updateVolumeBarWidth, this);
    this.$targetEl = $(targetEl);
    this.displayTimeout = null;
    this.displayTimeoutDuration = 2500;
    this.currentVolume = initialVolume;
  }

  RadioVolumeControl.prototype._changeVolume = function(amount) {
    var newVol;
    if (!amount) {
      return;
    }
    newVol = this.currentVolume + amount;
    if (newVol > 1) {
      newVol = 1;
    }
    if (newVol < 0) {
      newVol = 0;
    }
    this.currentVolume = newVol;
    this.updateVolumeBarWidth();
    this.showVolumeMeter();
    return newVol;
  };

  RadioVolumeControl.prototype.increaseVolume = function(amount) {
    if (amount == null) {
      amount = 0.1;
    }
    return this._changeVolume(amount);
  };

  RadioVolumeControl.prototype.decreaseVolume = function(amount) {
    if (amount == null) {
      amount = 0.1;
    }
    return this._changeVolume(-amount);
  };

  RadioVolumeControl.prototype.updateVolumeBarWidth = function() {
    return $('.radio-volume-bar').width(this.currentVolume * 100 + "%");
  };

  RadioVolumeControl.prototype.showVolumeMeter = function() {
    clearTimeout(this.displayTimeout);
    this.$targetEl.show();
    return this.displayTimeout = setTimeout((function(_this) {
      return function() {
        return _this.$targetEl.hide();
      };
    })(this), this.displayTimeoutDuration);
  };

  return RadioVolumeControl;

})();
